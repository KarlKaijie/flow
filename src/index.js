const fs=require("fs"),path=require("path"),{exec:exec}=require("child_process"),targetDir=path.join("src","libs","workflow_dataflow"),tempDir=path.join("src","libs","temp_directory"),folderToCopy="src/views/appEngine",mdPath=path.join("src","libs","workflow_dataflow","README.md"),TEMP_READ_DIR=path.join(tempDir,"src","components"),TARGET_DIR=path.join("src","components"),tempDirMain=path.join(tempDir,"__temp__main"),needUpdateCom=["StrengthMeter","Icon","CountDown","CustomUpload","SimpleUpload","UserPicker","Location","Upload","Table","Form"];function copyFolderRecursive(e,o){fs.existsSync(o)||fs.mkdirSync(o,{recursive:!0});const t=fs.readdirSync(e);for(const r of t){const t=path.join(e,r),n=path.join(o,r);fs.statSync(t).isDirectory()?copyFolderRecursive(t,n):fs.copyFileSync(t,n)}}function cloneRepository(e,o){return new Promise((t,r)=>{console.log("请稍等, 正在拉取组件....");exec(`git clone --quiet -b workflow_dataflow --single-branch ${e} ${o}`,(e,o,n)=>{if(e)return r(`克隆仓库失败: ${n}`);t()})})}function cloneMainRepository(e,o){return new Promise((t,r)=>{exec(`git clone --quiet ${e} ${o}`,(e,o,n)=>{if(e)return r(`克隆仓库失败: ${n}`);t()})})}function deleteDirectory(e){fs.existsSync(e)&&fs.rmSync(e,{recursive:!0,force:!0})}function writeMD(){const e=`\n  # 注意\n\n此文件夹内容，不由本项目维护，在执行npm run flow时自动生成，更新时会被完全替换，请勿修改内容。\n\n此外，您的项目中，以下 公共组件 会同步更新，若以下组件有bug，请在 主项目 xy-paas-console-frontend 项目中，统一修改, 或合并到主项目，以便其它项目同步\n  [\n    'StrengthMeter',\n    'Icon',\n    'CountDown',\n    'CustomUpload',\n    'SimpleUpload',\n    'UserPicker',\n    'Location',\n    'Upload',\n    'Table',\n    'Form',\n  ]\n  `;fs.writeFile(mdPath,e,e=>{if(e)return console.error("写入文件时出错:",e)})}const listDirectories=e=>fs.readdirSync(e).filter(o=>fs.statSync(path.join(e,o)).isDirectory()),updateDirectories=(e,o)=>{e.forEach(e=>{const t=o[e],r=path.join(TEMP_READ_DIR,t),n=path.join(TARGET_DIR,t);fs.existsSync(n)&&fs.rmSync(n,{recursive:!0,force:!0}),fs.cpSync(r,n,{recursive:!0}),console.log(`已更新 ${t} 到 ${TARGET_DIR}`)})};async function updateComponents(e){try{await cloneMainRepository(e,tempDirMain);const o=listDirectories(TEMP_READ_DIR);if(0===o.length)return console.log("没有找到可更新的文件夹。"),void deleteDirectory(tempDir);const t=[];if(o.forEach((e,o)=>{needUpdateCom.includes(e)&&t.push(o)}),0===t.length)return console.log("未选择任何文件夹。"),void deleteDirectory(tempDir);updateDirectories(t,o)}catch(e){console.error("发生错误：",e)}finally{deleteDirectory(tempDir)}}async function updateWorkflowDataflow(e){try{deleteDirectory(targetDir),deleteDirectory(tempDir),await cloneRepository(e,tempDir);const o=path.join(tempDir,folderToCopy),t=path.join(targetDir,path.basename(folderToCopy));fs.existsSync(o)?(copyFolderRecursive(o,t),writeMD(),console.log("-------- 开始更新 ----------"),await updateComponents(e),console.log(`已更新 数据流和工作流 到 ${targetDir}`),console.log(),console.log("-------- 操作成功 ----------")):console.error("源文件夹不存在:",o)}catch(e){console.error("发生错误:",e)}}module.exports={updateWorkflowDataflow:updateWorkflowDataflow};